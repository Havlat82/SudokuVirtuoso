0001: #Přeměna šablony na SudokuVirtuoso

- nastavení projektu po spuštění
- přejmenovat projekty, složky projektů, název sestavení, text v MainForm.cs
- zkontrolovat namespaces a další vlastnosti csproj a sln souborů 
pomocí editoru zkouknout cesty
- aktualizovat dotnet-desktop.yml script
- aktualizovat readme.md
- kontrolní solution build & run

==================================================================

0002: #Přidání SudokuSolver 

- přidáno rozhraní ISudokuSolver, definuje methody GeneratePuzzle a SolvePuzzle 
- přidaná třída SudokuSolver, která implementuje ISudokuSolver
- přidaný základní testy pro methodu SudokuSolver.SolvePuzzle
- přidaný privatní pole ISudokuSolver _sudokuSolver do MainForm.cs v WinFormsUI projektu
- instanciace privatního pole v metodě InitPuzzle, která je volaná v konstruktoru MainForm.cs
- aktualizace dotnet-desktop.yml skriptu, aby spouštěl testy.

Testy budou padat z důvodu NotImplementedException v metodě SudokuSolver.SolvePuzzle

==================================================================

0003: #Změna CI skriptu  

- aktualizace dotnet-desktop.yml skriptu, aby NEspouštěl testy.

Změnil jsem názor. Testy aktivuju, až budou implementovaný.

==================================================================

0004: #Přidání Sandbox Console Projectu

- Přidání projektu SudokuVirtuoso.Sandbox.ConsoleUI. Projekt je čistě pro experimenty 
  a pak bude smazán. Třídy a metody v něm pak přenesu do SudokuVirtuoso.Core nebo 
  do mé sokromé knihovny (HavlatLibrary / BoogabooLibrary), která bude Nuget package.

==================================================================

0005: #Přidání experimentálních tříd

Přidal jsem do projektu SudokuVirtuoso.Sandbox.ConsoleUI několik experimentálních tříd.

- Vytvořil jsem v projektu složku DancingLinks, která obsahuje třídy které implementují
algoritmus DancingLinks jehož autorem je Donald Knuth. Bohužel je tam chyba. 
Pravděpodobně v rekurzi.

- Přidána statická třída SudokuHelper, která obsahuje metodu PrintGrid, 
která vypíše sudoku mřížku do konzole.

- Přidána třída Position. Drží data o pozici na sudoku mřížce. 
Potřebuje refaktorovat, ve finální podobě to bude struct.

- Přidány třídy PuzzleSettings a Rules, obě v podstatě dělají to samé, 
drží základní pravidla sudoku. Zeptat se AI, který způsob je lepší. 

==================================================================

0006: #Přidání experimentálních tříd

Modified : SudokuVirtuoso.sln
Added : source/SudokuVirtuoso.Core/GridValidator.cs
Added : source/SudokuVirtuoso.Core/OriginalSolver.cs
Added : source/SudokuVirtuoso.Core/Rules.cs
Modified : source/SudokuVirtuoso.Core/SudokuSolver.cs
Added : source/SudokuVirtuoso.Sandbox.ConsoleUI/IntWrapper.cs
Modified : source/SudokuVirtuoso.Sandbox.ConsoleUI/Program.cs
Modified : source/SudokuVirtuoso.Sandbox.ConsoleUI/Rules.cs
Added : source/SudokuVirtuoso.Sandbox.ConsoleUI/SudokuGrid.cs
Added : source/SudokuVirtuoso.Sandbox.ConsoleUI/SudokuGridObsolote.cs
Modified : source/SudokuVirtuoso.Sandbox.ConsoleUI/SudokuVirtuoso.Sandbox.ConsoleUI.csproj
Added : source/SudokuVirtuoso.Sandbox.ConsoleUI/packages.config
Modified : tests/SudokuVirtuoso.Core.Tests/SudokuSolverTests.cs

==================================================================

0007: #Implementace SolveSudoku

11 files modified and 2 files added and 4 files deleted

Modified : .github/workflows/dotnet-desktop.yml
Modified : documents/change-log.txt
Modified : source/SudokuVirtuoso.Core/ISudokuSolver.cs
Added : source/SudokuVirtuoso.Core/ModifiedSolver.cs
Added : source/SudokuVirtuoso.Core/ModifiedSolver2.cs
Deleted : source/SudokuVirtuoso.Core/OriginalSolver.cs
Modified : source/SudokuVirtuoso.Core/Rules.cs
Modified : source/SudokuVirtuoso.Core/SudokuSolver.cs
Deleted : source/SudokuVirtuoso.Sandbox.ConsoleUI/IntWrapper.cs
Modified : source/SudokuVirtuoso.Sandbox.ConsoleUI/Program.cs
Deleted : source/SudokuVirtuoso.Sandbox.ConsoleUI/PuzzleSettings.cs
Deleted : source/SudokuVirtuoso.Sandbox.ConsoleUI/Rules.cs
Modified : source/SudokuVirtuoso.Sandbox.ConsoleUI/SudokuGrid.cs
Modified : source/SudokuVirtuoso.Sandbox.ConsoleUI/SudokuVirtuoso.Sandbox.ConsoleUI.csproj
Modified : source/SudokuVirtuoso.Sandbox.ConsoleUI/packages.config
Modified : source/SudokuVirtuoso.WinFormsUI/MainForm.cs
Modified : tests/SudokuVirtuoso.Core.Tests/SudokuSolverTests.cs

==================================================================

0008: #Rozhodnutí, která verze SudokuSolver je lepší 

zůstáva ModifiedSolver2 jako BacktrackingSolver

je to lepší verze, protože je výkonější a víc čitelná

==================================================================

0009: #Změny v Rules 

- Změna ze struct na třídu 
zůstáva ModifiedSolver2 jako BacktrackingSolver
- Update refererencí
- Zapouzdření predikátu do samostané metody v metodě HasValidValues 
v třídě GridValidator
- Přidání třídy ValidValues, zapouzdřuje platné hodnoty v řídě Rules
- Update refererencí

// Dodělat dokumentaci, zkontrolovat jestli je správně seřazená podle stylukopu,
        // jak třídů optimalizovat po stránce udržitelnosti, čitelnosti, testovatelnosti a efektivity kódu
       
        
        

you are an expert c# developer. 
can you make codereview of this code?
you MUST use .NET Standard 2.0
How would you improve it? Are there code, that you would remove?
 Keep in mind best practices, 
readability, security, maintainability, and code efficiency.

can you make xml comments documenting class

isn't the public int Count property redundant?
I will probably only use it when checking validity. 
does this method even make sense? 
public static bool AreValid(ValidValues ​​validValues)
How would you improve it? Keep in mind best practices, 
readability, security, maintainability, and code efficiency.

it is better to have a constant in the Rules class or 
to have a public int property EmptyCellValue { get; } 
in the ValidValues ​​class? Or it's best to combine it. 
what implementation 
is better in your point of you? explain why. be very detailed. 
How would you improve it? Keep in mind best practices, 
readability, security, maintainability, and code efficiency.

As an expert C# developer, I believe the best approach is to have the EmptyCellValue as a constant in the Rules class. Here's why:

Semantic meaning: The empty cell value is a fundamental rule of the Sudoku game, not a property of valid values. It belongs conceptually to the Rules class.

Single source of truth: Having it in Rules ensures there's only one place to change this value if needed, improving maintainability.

Accessibility: As a constant in Rules, it's easily accessible throughout the codebase without needing an instance of ValidValues.

Performance: A constant is slightly more efficient than a property, as it's resolved at compile-time.

Immutability: A constant guarantees immutability, which is appropriate for a game rule that should never change during runtime.

To improve this implementation, I would:

Use a readonly static field instead of a constant if we want to allow this value to be set once at runtime (e.g., for different Sudoku variants):
public class Rules
{
    public static readonly int EmptyCellValue = 0;
    // ... other members ...
}

Copy

Apply

Consider using an enum for special cell values:
public enum CellValue
{
    Empty = 0,
    // ... potentially other special values ...
}

public class Rules
{
    public static readonly CellValue EmptyCellValue = CellValue.Empty;
    // ... other members ...
}

Copy

Apply

This approach improves type safety and readability.

Add XML documentation to clearly explain the purpose and usage of EmptyCellValue:
/// <summary>
/// Represents an empty cell in the Sudoku grid.
/// </summary>
public static readonly CellValue EmptyCellValue = CellValue.Empty;

Copy

Apply

If different Sudoku variants might use different empty cell values, we could make it an instance field of Rules, initialized in the constructor:
public class Rules
{
    public CellValue EmptyCellValue { get; }

    public Rules(CellValue emptyCellValue, /* other parameters */)
    {
        EmptyCellValue = emptyCellValue;
        // ... initialize other fields ...
    }
}

Copy

Apply

This approach maintains the semantic connection to Rules while allowing flexibility for different game variants.

These improvements enhance readability, maintainability, and provide a clear, efficient way to represent and use the empty cell value throughout the Sudoku solver implementation.

Refactor ValidValues class for improved efficiency and security

- Implement IEquatable<ValidValues> for efficient comparisons
- Use RNGCryptoServiceProvider for cryptographically secure randomization
- Remove redundant Count property
- Add XML documentation for better code clarity
- Seal class to prevent unintended inheritance
- Simplify Equals and GetHashCode methods
- Incorporate validation logic into constructor
- Rename AsReadOnly method to Get for clarity
  
==================================================================

0010: #Přidání třídy ValueShuffler zapouzdřuje náhodný čísla 
a náhodné míchání hodnot při generování nového sudoku
Pokračování v čištění / Refactorizaci třídy ValidValues

- Přesun relevantního kódu z třídy ValidValues do nové třídy 
ValueShuffler
- Update volání metody ve třídě BacktrackingSolver ( metoda FillGrid )

- Create ValueShuffler for secure random value shuffling
- Add XML documentation to ValueShuffler class for better code clarity

==================================================================

0011: #Přidání třídy ValueValidator

Zapouzdřuje validaci platných hodnodot v sudoku
Clean / Refactor třídy ValidValues

- Create ValueValidator for value validation in Sudoku
- Přesun relevantního kódu z třídy ValidValues do nové třídy 
ValueValidator
- Update volání relevantních metod
- Add XML documentation to ValueShuffler class for better code clarity

==================================================================

0012: #Přidání třídy ValueSetMananager

Zapouzdřuje zapsanné hodnoty v řádku, sloupci a čtverci
Clean / Refactor třídy BacktrackingSolver

- Create ValueSetMananager zapouzdřuje množiny zadaných hodnot
- Přesun relevantního kódu z třídy BacktrackingSolver do nové třídy 
ValueSetMananager
- Update volání relevantních metod ve třídě BacktrackingSolver
- Add XML documentation to ValueShuffler class for better code clarity

Minor changes:
- Remove unused field _random in SudokuSolver
- Add some todo comments